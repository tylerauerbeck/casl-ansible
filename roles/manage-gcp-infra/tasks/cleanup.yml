---

- name: setup gcloud configuration
  shell: gcloud config configurations create openshift-{{ gcloud_env }}
  register: result
  failed_when: not ((result.rc == 0) or ("it already exists" in result.stderr))
  changed_when: not ("it already exists" in result.stderr)    
  
- name: setup gcloud authenticationn
  shell: gcloud auth activate-service-account --key-file {{ credentials_file }} --project {{ gcloud_project_name }}
  
- name: retrieve master public ip
  shell: gcloud compute addresses list --format json --filter name={{ gcloud_env }}-master-external
  register: master_external
  changed_when: false     

- name: remove master public dns entry
  gcdns_record:
    record: "{{ gcloud_master_external_fqdn }}"
    zone: "{{ gcloud_managed_zone }}"
    type: A
    value: "{{ (master_external.stdout | from_json)[0].address }}"
    overwrite: true
    credentials_file: "{{ credentials_file }}"
    service_account_email: "{{ service_account_email }}"
    project_id: "{{ project_id }}"
    state: absent
  when: (master_external.stdout | from_json)      
    
- name: retrieve master internal ip
  shell: gcloud compute forwarding-rules list --format json --filter name={{ gcloud_env }}-master-internal-fwr
  register: master_internal
  changed_when: false        
    
- name: remove master internal dns entry
  gcdns_record:
    record: "{{ gcloud_master_internal_fqdn }}"
    zone: "{{ gcloud_managed_zone }}"
    type: A
    value: "{{ (master_internal.stdout | from_json)[0].IPAddress }}"
    overwrite: true
    credentials_file: "{{ credentials_file }}"
    service_account_email: "{{ service_account_email }}"
    project_id: "{{ project_id }}"
    state: absent
  when: (master_internal.stdout | from_json)    
    
- name: retrieve master public ip
  shell: gcloud compute addresses list --format json --filter name={{ gcloud_env }}-infranode-external
  register: infranode_external
  changed_when: false    
    
- name: remove infranode dns entry
  gcdns_record:
    record: "{{ gcloud_infranode_wildcard_fqdn }}"
    zone: "{{ gcloud_managed_zone }}"
    type: A
    value: "{{ (infranode_external.stdout | from_json)[0].address }}"
    overwrite: true
    credentials_file: "{{ credentials_file }}"
    service_account_email: "{{ service_account_email }}"
    project_id: "{{ project_id }}"
    state: absent
  when: (infranode_external.stdout | from_json)       

- name: Verify google deployment exists
  shell: gcloud deployment-manager deployments list 2>&1 | grep openshift-{{ gcloud_env }}
  register: deployment
  failed_when: deployment.rc|int > 1
  changed_when: false
    
- name: Destroy GCP Infrastructure
  block:
    - name: Determine GCP bucket size
      shell: gsutil ls -l gs://{{ google_registry_bucket_name }}
      register: gs_file_count
      failed_when: gs_file_count.rc|int > 1
    - name: Empty GCP bucket if necessary
      shell: gsutil rm gs://{{ google_registry_bucket_name }}/**
      when:
      - gs_file_count.stdout
    - name: Delete GCP nodes and storage bucket
      shell: gcloud deployment-manager deployments delete openshift-{{ gcloud_env }} --quiet
  when:
  - deployment.stdout
